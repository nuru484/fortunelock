// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  output        = "../src/generated/prisma"
  binaryTargets = ["native", "rhel-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum TransactionStatus {
  PENDING
  SUCCESS
  FAILED
}

enum TransactionType {
  PURCHASE
  SALE
}

enum Role {
  ADMIN
  USER
}

enum Currency {
  USD
  EUR
  GBP
  KWD
}

model User {
  id             Int       @id @default(autoincrement())
  email          String    @unique
  password       String
  firstName      String
  middleName     String?
  lastName       String
  dateOfBirth    DateTime?
  gender         String?
  phoneNumber    String?
  nationality    String?
  profilePicture String?
  country        String
  role           Role      @default(USER)
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  // Relations
  identity     Identity?
  addresses    Address[]
  transactions Transaction[]
  payments     Payment[]
  holdings     Holding[]
  goldItems    GoldItem[]
  portfolio    Portfolio?
  wallet       Wallet?
}

model Address {
  id         Int         @id @default(autoincrement())
  userId     Int
  user       User        @relation(fields: [userId], references: [id])
  type       AddressType @default(RESIDENTIAL)
  street     String
  city       String
  state      String?
  postalCode String
  country    String
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
}

enum AddressType {
  RESIDENTIAL
  MAILING
  BUSINESS
}

model Wallet {
  id        Int      @id @default(autoincrement())
  userId    Int      @unique
  user      User     @relation(fields: [userId], references: [id])
  balance   Float    @default(0)
  currency  Currency @default(USD)
  updatedAt DateTime @updatedAt
}

model Portfolio {
  id               Int      @id @default(autoincrement())
  userId           Int      @unique
  user             User     @relation(fields: [userId], references: [id])
  totalGrams       Float    @default(0)
  totalInvested    Float    @default(0)
  currentValue     Float    @default(0)
  unrealizedGain   Float    @default(0)
  lastCalculatedAt DateTime @default(now())
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
}

model Identity {
  id             Int       @id @default(autoincrement())
  userId         Int       @unique
  user           User      @relation(fields: [userId], references: [id])
  documentType   String
  documentNumber String    @unique
  issueDate      DateTime?
  expiryDate     DateTime?
  proofOfAddress String?
  verified       Boolean   @default(false)
  verifiedAt     DateTime?
  verifiedBy     Int?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
}

enum GoldItemType {
  BAR
  COIN
  JEWELRY
  OTHER
}

enum DepositMethod {
  PHYSICAL
  ONLINE_PURCHASE
}

model GoldItem {
  id              Int           @id @default(autoincrement())
  userId          Int
  transactionId   Int
  type            GoldItemType // BAR, COIN, JEWELRY
  description     String? // e.g., "PAMP Suisse Bar", "Krugerrand Coin"
  serialNumber    String?       @unique // Some bars have unique numbers
  karat           Float? // e.g., 24, 22, 18
  purity          Float? // e.g., 0.9999 for 24k
  weightGrams     Float
  origin          String? // Country or refinery
  storageLocation String? // e.g., "Vault A - Shelf 3"
  depositMethod   DepositMethod @default(PHYSICAL)
  verified        Boolean       @default(false)
  verifiedBy      Int? // Admin ID
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  // Relations
  user        User        @relation(fields: [userId], references: [id])
  transaction Transaction @relation(fields: [transactionId], references: [id])
}

model GoldPrice {
  id Int @id @default(autoincrement())

  // Basic price information
  pricePerGram Float // Main price (24k)
  currency     Currency @default(USD)

  // Extended price data from API
  openPrice          Float?
  highPrice          Float?
  lowPrice           Float?
  prevPrice          Float? // Previous price
  askPrice           Float?
  bidPrice           Float?
  priceChange        Float? // Absolute change
  priceChangePercent Float? // Percentage change

  // Different karat prices
  price24k Float?
  price22k Float?
  price21k Float?
  price20k Float?
  price18k Float?
  price16k Float?
  price14k Float?
  price10k Float?

  // Metadata
  baseCurrency String? // The base currency used for this price record
  weightUnit   String? // gram, ounce, etc.
  weightName   String? // "Gram (g)", "Ounce (oz)", etc.
  source       String? // API source identifier
  apiTimestamp BigInt? // Original API timestamp

  recordedAt DateTime @default(now())
  isActive   Boolean  @default(true)

  @@index([currency, recordedAt])
  @@index([isActive, recordedAt])
}

model GoldUnitMetadata {
  id           Int      @id @default(autoincrement())
  unitName     String // e.g., gram, ounce
  gramsPerUnit Float // e.g., 1 for gram, 31.1035 for ounce
  symbol       String // g, oz
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

enum TransactionSource {
  ONLINE
  PHYSICAL_DEPOSIT
}

model Transaction {
  id              Int               @id @default(autoincrement())
  referenceNumber String            @unique
  userId          Int
  user            User              @relation(fields: [userId], references: [id])
  type            TransactionType
  source          TransactionSource @default(ONLINE)
  status          TransactionStatus @default(PENDING)
  gramsPurchased  Float
  pricePerGram    Float
  totalCost       Float
  fee             Float?
  currency        Currency          @default(USD)
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  payment         Payment?          @relation(fields: [paymentId], references: [id])
  paymentId       Int?              @unique
  holdings        Holding[]
  goldItems       GoldItem[]
}

model Payment {
  id          Int          @id @default(autoincrement())
  userId      Int
  user        User         @relation(fields: [userId], references: [id])
  method      String // e.g., Credit Card, Bank Transfer
  reference   String? // Gateway reference
  amount      Float
  currency    Currency     @default(USD)
  status      String       @default("PENDING")
  processedAt DateTime?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  transaction Transaction?
}

model Holding {
  id            Int         @id @default(autoincrement())
  userId        Int
  transactionId Int
  amount        Float
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  user          User        @relation(fields: [userId], references: [id])
  transaction   Transaction @relation(fields: [transactionId], references: [id])
}
